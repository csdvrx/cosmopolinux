# ~/.inputrc: used by readline programs like bash for defaults and shortcuts
# Reload with `bind -f ~/.inputrc` or re-read-init-file shortcut
# Inspect shortcuts with `bind -p`
#
##### A) Global options

# Send & Receive 8 bit chars
set meta-flag on
set convert-meta off
set input-meta on 
set output-meta on

# Protect against copy-paste
#set enable-bracketed-paste on

# Disable beep
set bell-style visible

# Do not wrap command lines
set horizontal-scroll-mode off

# Tab will also work on ~ (homedirs)
set expand-tilde on

# Mark edited commandlines with a * prefix
set mark-modified-lines on

# Completions which are symbolic links to directories get a slash ending
#set mark-symlinked-directories on

# Use color for file info with stat
set colored-stats on

# File infos are appended by characters indicating file types
set visible-stats on

# No case requirements for tab completion
set completion-ignore-case on

# 1st tab tries to complete, 2nd list all possibilities
# can have the 1st do both steps if some possibilities remain after it
set show-all-if-ambiguous on

# In tab completion side a directory where many files have the same prefix
# avoid cluttering the screen by replacing the prefix with an ellipsis if 
# the common prefix has more than X characters, default X=13, here X:
set completion-prefix-display-length 15

##### B) Key mappings

##### B1) Remove full words: Ctrl-W (to the left) Ctrl-S (to the right)

## Backward-kill-word is Ctrl-w (default), but kill-word is Alt|Esc-d (hard)
# complicated, so remap  Ctrl-s: makes Ctrl-k|u and Ctrl-w|s very close/symmetric
"\C-s": kill-word

### Word cuts will also be remapped to Ppt-Remove in OSX, Alt-Delete in Linux
##  Remap Alt+Delete to also kill-world
"\e[3;3~": kill-word
## OSX: Remap Alt+Backspace to Backward-kill-word
"\e[9;3~": backward-kill-word
#$if term=wezterm
# Remap also Control-Backspace to kill words to the left
#  FIXME: not working, must not be conditional because conflict:
# may need OSD amd proprities (or new sequences thah just ctrl-H)
#"\C-h": backward-kill-word
"\C-h": backward-kill-line
#endif

##### B2) Remove single chars: Delete (to the right)

## Delete to the right will be remapped to Delete
"\e[3~": delete-char
# keypad on . also has a delete function
#"\eOn": delete-char
# Special case for VT100 (borks backspace -> make it conditionnal)
$if term=vt100
"\C-?": delete-char
$endif

##### B3) Remove single: Backspace (to the left)

## Delete to left will be remapped to Backspace 
"\C-?": backward-delete-char
# keypad on 5 also has a backspace function
#"\eOu": backward-delete-char
# Special case for VT100 (borks backspace -> make it conditionnal)
$if term=vt100
"\C-H": backward-delete-char
$else
# General case where the ^H character will be found for Ctrl-Backspace: remove full words to the left
"\C-H": backward-kill-word
$endif

### Undo will be remapped to alt-Z in Linux, using the esc equivalent
"\ez": undo
# WONTFIX: bash doesn't have incremental redo, only \er revert-line full undo

### Paste buffer (alternate-use : overwrite-mode) will be remapped to Insert
"\e[2~": yank
# keypad on 0 also has insert
#"\eOp": yank

### Line cuts will Ctrl-Backspace and Ctrl-Delete
#"\C-_": backward-kill-line # FIXME: not as good
"\e[3;5~": kill-line
# Ctrl-Delete variants for tmux and urxvt
"\e[M": kill-line
"\e[3^": kill-line

## OSX: Remap with ... Cmd+Backspace to Ctrl-u
"\e[9;2~": backward-kill-line
## OSX: Remap with ControllerMate Cmd+Delete to Ctrl-k
"\e[3;2~": kill-line


## Foot
$if term=foot
# Ctrl-backspace
"\C-h": backward-kill-word
# allow jumping between prompts with Ctrl-shift-x|z
set show-mode-in-prompt on
set emacs-mode-string "\1\e]133;A\e\\\2"
# Uncomment and/or adjust if you're using the vi editing-mode.
# set vi-cmd-mode-string "\1\e]133;A\e\\\2"
# set vi-ins-mode-string "\1\e]133;A\e\\\2"
$endif

# can check the bindings with:
#  bind -P |grep -i "\\c-h"
# can manually assign them with:
#  bind '"\C-h":backward-kill-word'

## Windows terminal extra: needs proper remaps for Ctrl-BS, Alt-BS, Shift-BS
# https://github.com/microsoft/Terminal/issues/755
# { "keys": "ctrl+backspace", "command": { "action": "sendInput", "input": "\u0017" },
#"\C-h": backward-kill-word

# For word and line cuts, in linux-Console, use Fxx strings for mappings
# keys to sequences if needed, and in X, change the xterms own mapping
# in your .Xresources:
#*VT100.Translations:   #override  Ctrl  <Key> Delete: string("0x15") \n
# 15 is 21 in hexa, which means u (the 21st letter)
# 0B is 11 in hexa, which means k (the 11 letter)
# 17 is 23 in hexa, which means w (the 23rd letter)
# 18 is 24 in hexa, which means x (the 24rd letter)

### Beginning and end of edit line will be remapped to Home & End
## OSX: Shift+Home and Shift+End map by default to these rxvt/xterm entries
# linux-console
"\e[1~": beginning-of-line
"\e[4~": end-of-line
# xterm
"\e[H": beginning-of-line
"\e[F": end-of-line
# rxvt-original
"\e[7~": beginning-of-line
"\e[8~": end-of-line
# keypad-alternative on 1 and 7
#"\eOw": beginning-of-line
#"\eOq": end-of-line
# Nxterm
#"\e[\C-@": beginning-of-line
#"\e[e": end-of-line
### OSX shortcut emulation :
# Cmd default shortcut is handled by Terminal and you can add Alt+PageUp
# & Alt+PageDown to buffer scroll instead

### Search command history will be NOT remapped to PageUp & PageDown
### use instead like home and end? No, ALT
### use for word navigation that otherwise require arrows
# linux-console and rxvt
"\e[5~": backward-word
#beginning-of-line
# reverse-search-history
"\e[6~": forward-word
#end-of-line
#forward-search-history
# xterm
"\eOH": backward-word
#beginning-of-line
#reverse-search-history
"\eOF": forward-word
#end-of-line
#forward-search-history
# keypad-alternative on 3 and 9
#"\eOs": reverse-search-history
#"\eOy": forward-search-history
### OSX shortcut emulation:
# You should hardcode Esc[5~ Esc[6~ in Terminal/Settings which
# by default are mapped to buffer scroll, and remap Shift+PageUp &
# Shift+PageDown to buffer scroll instead
# Besides that, Cmd default shortcut is handled by Terminal and
# you can add Alt+PageUp & Alt+PageDown to buffer scroll too

### History navigation will be remapped to vertical arrows
"\e[A": previous-history
"\e[B": next-history
# keypad 2 8 
#"\eOA": previous-history
#"\eOB": next-history

### Character navigation will be remapped to horizontal arrows
"\e[C": forward-char
"\e[D": backward-char
# keypad 4 6
#"\eOC": forward-char
#"\eOD": backward-char

### History start & end will be remapped to Ctrl + vertical arrows
# Default
"\e[1;5A": beginning-of-history
"\e[1;5B": end-of-history
## OSX : You must define Ctrl-Up and Ctrl-Down sequence in Terminal Settings
"\eO5A": beginning-of-history
"\eO5B": end-of-history
# xterm original
"\e[5A": beginning-of-history
"\e[5B": end-of-history
# Unknown alternative
#"\e\eA": beginning-of-history
#"\e\eB": end-of-history
### OSX shortcut emulation :
# Cmd/Alt default shortcut emulation for OSX : Alt+Arrows should be
# mapped to : up=Ctrl-a, down=Ctrl-e, Cmd is already mapped by default
# to scroll up/down one line

### Word navigation will be remapped to Ctrl + horizontal arrows
# Default
"\e[1;5C": forward-word
"\e[1;5D": backward-word
## OSX
"\eO5C": forward-word
"\eO5D": backward-word
# xterm original
"\e[5C": forward-word
"\e[5D": backward-word
# Unknown alternative
#"\e\e[C": forward-word
#"\e\e[D": backward-word
### OSX shortcut emulation:
# Cmd/Alt default shortcut emulation for OSX : Alt+Arrows should be
# mapped to : left=Esc-B, right=Esc-f, Cmd is  already mapped by
# default to tab navigation.

## WONTFIX: because autohotkey triggers controls on resume (!!), MSYS problem:
## shift-V does paste-from-clipboard even if shown as unbound in bind-p
# none of that works:
#"V": self-insert
#"V": "\C-vV\C-v"
#"\C-y": self-insert

# disable escape
"\e\e":

